services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    platform: linux/amd64
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - msa-network

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    platform: linux/amd64
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - msa-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    platform: linux/amd64
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - msa-network

  # Eureka-server
  eureka-server:
    image: eureka-server:latest
    container_name: eureka-server
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    env_file:
      - .env
    networks:
      - msa-network

  # Gateway
  gateway:
    image: gateway:latest
    container_name: gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    depends_on:
      - eureka-server
    ports:
      - "9000:9000"
    env_file:
      - .env
    networks:
      - msa-network

  # User Service
  user-service:
    image: user-service:latest  # user-service 이미지 이름
    container_name: user-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
    depends_on:
      - db
      - eureka-server
    ports:
      - "9001:9001"
    env_file:
      - .env
    networks:
      - msa-network

  # Order Service
  order-service:
    image: order-service:latest  # order-service 이미지 이름
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
    depends_on:
      - db
      - eureka-server
    ports:
      - "9003:9003"
    env_file:
      - .env
    networks:
      - msa-network

  # Ticket Service
  ticket-service:
    image: ticket-service:latest  # ticket-service 이미지 이름
    container_name: ticket-service
    build:
      context: ./ticket-service
      dockerfile: Dockerfile
    depends_on:
      - db
      - eureka-server
    ports:
      - "9002:9002"
    env_file:
      - .env
    networks:
      - msa-network

  db:
    container_name: db
    image: mysql:latest
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    command:
      - "mysqld"
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"
    networks:
      - msa-network
    deploy:
      resources:
        limits:
          cpus: '0.50'   # CPU 50%
          memory: 256M    # 메모리 512MB
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    command: [ "redis-server", "--requirepass", "${SPRING_REDIS_PASSWORD}"   ]  # Redis 비밀번호 설정
    env_file:
      - .env
    networks:
      - msa-network
    deploy:
      resources:
        limits:
          cpus: '0.25'   # CPU 25%
          memory: 512M    # 메모리 256MB

volumes:
  mysql-data:

networks:
  msa-network:
    driver: bridge